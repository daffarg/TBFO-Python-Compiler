S -> CODE | CODE NEWLINE S | NEWLINE CODE
CODE -> IF_BLOCK | WHILE_BLOCK | FOR_BLOCK

VARIABLE -> variable
MULTI_VAR -> VARIABLE | VARIABLE COMMA MULTI_VAR

RELATIONAL_OP -> = = | ! = | > | < | >= | <= | is
LOGICAL_OP -> and | or | not
ARITHMETIC_OP -> + | - | * | / | % 
BREAK -> break 
CONTINUE -> continue
PASS -> pass 
RAISE -> raise
IN -> in
WITH -> with
AS -> as
LEFT_RB -> (
RIGHT_RB -> )
LEFT_SB -> [
RIGHT_SB -> ]
COLON -> :
COMMA -> ,

BOOLEAN -> True | False | VARIABLE RELATIONAL_OP VARIABLE | TYPE RELATIONAL_OP VARIABLE | VARIABLE RELATIONAL_OP TYPE | TYPE RELATIONAL_OP VARIABLE
TYPE -> string | numerical
EXPRESSION -> BOOLEAN COLON S | LEFT_RB BOOLEAN RIGHT_RB COLON S
PARAM -> LEFT_RB MULTI_VAR RIGHT_RB

NONE -> VARIABLE = None

# CONDITIONAL

IF_BLOCK -> if EXPRESSION | IF_BLOCK ELIF_BLOCK | IF_BLOCK ELSE_BLOCK | IF_BLOCK BREAK | IF_BLOCK CONTINUE | IF_BLOCK PASS | IF_BLOCK CONTINUE
ELIF_BLOCK -> elif EXPRESSION | ELIF_BLOCK ELIF_BLOCK | ELIF_BLOCK ELSE_BLOCK
ELSE_BLOCK -> else COLON S

# LOOPING 

WHILE_BLOCK -> while EXPRESSION 
FOR_BLOCK -> for VARIABLE IN VARIABLE COLON S

# FUNCTION/PROCEDURE 

DEF_BLOCK -> def VARIABLE PARAM COLON S

# RETURN 

RETURN -> return BOOLEAN | return VARIABLE | return TYPE



