S -> S S | S NEWLINE S | NEWLINE | COMMENT | ASSIGN | SELF_ARITH | IF_BLOCK | IF_ONE_LINE | WHILE_BLOCK | FOR_BLOCK | DEF_BLOCK | METHOD | RETURN | CLASS | CLASS_OBJECT | IMPORT | FROM | RAISE | WITH | PRINT | INPUT | PASS | VALUE | ONE_LINE

VARIABLE -> variable | variable PERIOD VARIABLE
MULTI_CLASS -> VALUE | VALUE COMMA MULTI_CLASS
MULTI_VAR -> VARIABLE | VARIABLE COMMA MULTI_VAR
MULTI_TYPE -> TYPE | TYPE COMMA MULTI_TYPE | LIST | LIST COMMA MULTI_TYPE

RELATIONAL_OP -> = = | ! = | > | < | > = | < = | is | is not
LOGICAL_OP -> and | or | not
ARITHMETIC_OP -> + | - | * | / | % | * * | / /
PASS -> pass 
IN -> in
WITH -> with
AS -> as
NONE -> None
INTEGER -> integer | - integer
FLOAT -> integer PERIOD integer | - integer PERIOD integer
LEFT_RB -> (
RIGHT_RB -> )
LEFT_SB -> [
RIGHT_SB -> ]
COLON -> :
COMMA -> ,
PERIOD -> .
NEWLINE -> newline

ONE_LINE -> VALUE | ASSIGN | SELF_ARITH | RAISE | PASS | ARR_ELMT
TYPE -> string | INTEGER | FLOAT
BOOLEAN_OPERAND -> VARIABLE | TYPE | ARITH | True | False | NONE | ARR_ELMT
OR_AND -> or | and 
BOOLEAN -> LEFT_RB BOOLEAN RIGHT_RB | BOOLEAN_OPERAND | LEFT_RB BOOLEAN_OPERAND RIGHT_RB | not BOOLEAN | not LEFT_RB BOOLEAN RIGHT_RB | BOOLEAN_OPERAND RELATIONAL_OP BOOLEAN_OPERAND | BOOLEAN OR_AND BOOLEAN | LEFT_RB BOOLEAN RIGHT_RB OR_AND LEFT_RB BOOLEAN RIGHT_RB
EXPRESSION_ONE_LINE -> BOOLEAN COLON ONE_LINE | LEFT_RB BOOLEAN RIGHT_RB COLON ONE_LINE
EXPRESSION -> BOOLEAN COLON NEWLINE S | LEFT_RB BOOLEAN RIGHT_RB COLON NEWLINE S | BOOLEAN COLON ONE_LINE | LEFT_RB BOOLEAN RIGHT_RB COLON ONE_LINE
EXPRESSION_COND_BC -> EXPRESSION | BOOLEAN COLON NEWLINE | LEFT_RB BOOLEAN RIGHT_RB COLON NEWLINE | EXPRESSION_BC
PARAM -> LEFT_RB MULTI_VAR RIGHT_RB | LEFT_RB RIGHT_RB
CASTING -> int LEFT_RB string RIGHT_RB | str LEFT_RB INTEGER RIGHT_RB | int LEFT_RB FLOAT RIGHT_RB | float LEFT_RB INTEGER RIGHT_RB | str LEFT_RB FLOAT RIGHT_RB | float LEFT_RB string RIGHT_RB 
INPUT -> input LEFT_RB string RIGHT_RB
PRINT -> print LEFT_RB VARIABLE RIGHT_RB | print LEFT_RB TYPE RIGHT_RB | print LEFT_RB BOOLEAN RIGHT_RB
MODULE -> VARIABLE | PERIOD VARIABLE | VARIABLE MODULE
TUPPLE -> LEFT_RB MULTI_TYPE RIGHT_RB
LIST -> LEFT_SB MULTI_TYPE RIGHT_SB | LEFT_SB RIGHT_SB
ARITH_OPERAND -> INTEGER | VARIABLE | FLOAT | ARR_ELMT
ARITH -> ARITH_OPERAND | ARITH ARITHMETIC_OP ARITH_OPERAND
ARR_ELMT -> VARIABLE LEFT_SB VARIABLE RIGHT_SB | VARIABLE LEFT_SB INTEGER RIGHT_SB | VARIABLE LEFT_SB ARITH RIGHT_SB

# BREAK & CONTINUE

BREAK_CONTINUE -> break | continue | S NEWLINE break | S NEWLINE continue | break NEWLINE S | continue NEWLINE S | NEWLINE break NEWLINE S | NEWLINE continue NEWLINE S

# COMMENT 

COMMENT -> comment NEWLINE

# ASSIGNMENT

DATA_TYPE -> TYPE | TUPPLE | LIST 
ASSIGN_DEST -> VARIABLE | ARR_ELMT | CLASS_OBJECT
ASSIGN -> ASSIGN_DEST = ARITH | ASSIGN_DEST = DATA_TYPE | ASSIGN_DEST = VARIABLE | ASSIGN_DEST = ASSIGN | ASSIGN_DEST = CLASS_OBJECT
SELF_ARITH_RIGHT -> INTEGER | VARIABLE | FLOAT | ARR_ELMT | ARITH
SELF_ARITH -> ASSIGN_DEST + = SELF_ARITH_RIGHT  | ASSIGN_DEST + = string | ASSIGN_DEST - = SELF_ARITH_RIGHT | ASSIGN_DEST * = SELF_ARITH_RIGHT | ASSIGN_DEST / = SELF_ARITH_RIGHT | ASSIGN_DEST % = SELF_ARITH_RIGHT | ASSIGN_DEST / / = SELF_ARITH_RIGHT | ASSIGN_DEST * * = SELF_ARITH_RIGHT

# CONDITIONAL

VALUE -> TYPE | TUPPLE | LIST | VARIABLE | ARR_ELMT
IF_ONE_LINE -> VALUE if BOOLEAN else ONE_LINE | VARIABLE = VALUE if BOOLEAN else ONE_LINE
IF_BLOCK -> if EXPRESSION | if EXPRESSION ELIF_BLOCK | if EXPRESSION else COLON NEWLINE S | if EXPRESSION else COLON ONE_LINE
ELIF_BLOCK -> elif EXPRESSION | elif EXPRESSION ELIF_BLOCK | elif EXPRESSION else COLON NEWLINE S | elif EXPRESSION else COLON ONE_LINE
ELSE_BLOCK -> else COLON NEWLINE S | else COLON ONE_LINE

IF_BLOCK_COND -> if EXPRESSION_BC | if EXPRESSION BREAK_CONTINUE
IF_BLOCK_COND -> IF_BLOCK NEWLINE IF_BLOCK_BC | IF_BLOCK ELIF_BLOCK_BC | IF_BLOCK ELSE_BLOCK_BC | IF_BLOCK_BC IF_BLOCK_BC | IF_BLOCK_BC IF_BLOCK
IF_BLOCK_COND -> IF_BLOCK_COND NEWLINE IF_BLOCK_BC | IF_BLOCK_COND ELIF_BLOCK_BC | IF_BLOCK_COND ELSE_BLOCK_BC | IF_BLOCK_BC IF_BLOCK_BC | IF_BLOCK_BC IF_BLOCK_COND

EXPRESSION_BC -> EXPRESSION | BOOLEAN COLON NEWLINE BREAK_CONTINUE NEWLINE | LEFT_RB BOOLEAN RIGHT_RB COLON NEWLINE BREAK_CONTINUE NEWLINE | BOOLEAN COLON BREAK_CONTINUE NEWLINE | LEFT_RB BOOLEAN RIGHT_RB COLON BREAK_CONTINUE NEWLINE
EXPRESSION_BC ->  BOOLEAN COLON NEWLINE BREAK_CONTINUE | LEFT_RB BOOLEAN RIGHT_RB COLON NEWLINE BREAK_CONTINUE | BOOLEAN COLON BREAK_CONTINUE | LEFT_RB BOOLEAN RIGHT_RB COLON BREAK_CONTINUE

# CONDITIONAL BREAK CONTINUE

IF_ONE_LINE_BC -> VALUE if BOOLEAN else break | VALUE if BOOLEAN else continue
IF_BLOCK_BC -> if EXPRESSION_COND_BC IF_BLOCK_BC | IF_BLOCK S BREAK_CONTINUE S | if EXPRESSION BREAK_CONTINUE | if EXPRESSION NEWLINE IF_BLOCK_BC | if EXPRESSION_BC | IF_BLOCK_BC ELIF_BLOCK_BC | IF_BLOCK_BC ELSE_BLOCK_BC | IF_BLOCK_BC ELIF_BLOCK | IF_BLOCK_BC ELSE_BLOCK
IF_BLOCK_BC -> IF_BLOCK NEWLINE IF_BLOCK_BC | IF_BLOCK ELIF_BLOCK_BC | IF_BLOCK ELSE_BLOCK_BC | IF_BLOCK_BC IF_BLOCK_BC | IF_BLOCK_BC IF_BLOCK
ELIF_BLOCK_BC -> elif EXPRESSION BREAK_CONTINUE | elif EXPRESSION_BC | ELIF_BLOCK_BC ELIF_BLOCK_BC | ELIF_BLOCK_BC ELSE_BLOCK_BC | ELIF_BLOCK_BC ELIF_BLOCK | ELIF_BLOCK_BC ELSE_BLOCK
ELIF_BLOCK_BC -> ELIF_BLOCK ELIF_BLOCK_BC | ELIF_BLOCK ELSE_BLOCK_BC | ELIF_BLOCK_BC IF_BLOCK_BC | ELIF_BLOCK_BC IF_BLOCK | ELIF_BLOCK IF_BLOCK_BC | ELIF_BLOCK IF_BLOCK_BC
ELSE_BLOCK_BC -> else COLON NEWLINE BREAK_CONTINUE | else COLON BREAK_CONTINUE | else COLON NEWLINE S BREAK_CONTINUE 

# LOOPING 

WHILE_BLOCK -> while EXPRESSION | while EXPRESSION IF_BC BREAK_CONTINUE | while EXPRESSION_ONE_LINE | while EXPRESSION BREAK_CONTINUE | while EXPRESSION_BC NEWLINE S | while EXPRESSION IF_BLOCK_BC | while EXPRESSION IF_BLOCK_BC NEWLINE S | while EXPRESSION IF_BLOCK_BC NEWLINE S | while EXPRESSION IF_ONE_LINE_BC NEWLINE S | while EXPRESSION IF_BLOCK_BC NEWLINE IF_BLOCK
WHILE_BLOCK -> while EXPRESSION NEWLINE IF_BLOCK_COND | while EXPRESSION_COND_BC IF_BLOCK_BC | while EXPRESSION_COND_BC IF_BLOCK_BC NEWLINE S | while EXPRESSION_COND_BC IF_BLOCK_BC NEWLINE IF_BLOCK | while EXPRESSION_COND_BC IF_BLOCK NEWLINE IF_BLOCK_BC | while EXPRESSION IF_BLOCK_BC
FOR_ONE_LINE -> VALUE | ASSIGN | SELF_ARITH | RAISE
RANGE_TYPE -> INTEGER | VARIABLE | ARITH
RANGE_PARAM -> range LEFT_RB RANGE_TYPE RIGHT_RB | range LEFT_RB RANGE_TYPE COMMA RANGE_TYPE RIGHT_RB | range LEFT_RB RANGE_TYPE COMMA RANGE_TYPE COMMA RANGE_TYPE RIGHT_RB
FOR_PARAM -> VARIABLE IN VALUE | VARIABLE IN RANGE_PARAM
FOR_BLOCK -> for FOR_PARAM COLON ONE_LINE | for FOR_PARAM COLON NEWLINE S
FOR_BLOCK -> for FOR_PARAM COLON NEWLINE EXPRESSION_BC | for FOR_PARAM COLON NEWLINE BREAK_CONTINUE | for FOR_PARAM COLON NEWLINE NEWLINE S | for FOR_PARAM COLON NEWLINE IF_BLOCK_BC | for FOR_PARAM COLON NEWLINE IF_BLOCK_BC NEWLINE S | for FOR_PARAM COLON NEWLINE IF_ONE_LINE_BC NEWLINE S | for FOR_PARAM COLON NEWLINE IF_BLOCK_BC NEWLINE ELIF_BLOCK | for FOR_PARAM COLON NEWLINE IF_BLOCK_BC NEWLINE IF_BLOCK | for FOR_PARAM COLON NEWLINE IF_BLOCK_BC NEWLINE ELSE_BLOCK
FOR_BLOCK -> for FOR_PARAM COLON NEWLINE IF_BLOCK_COND | for FOR_PARAM COLON NEWLINE IF_BLOCK_BC | for FOR_PARAM COLON NEWLINE IF_BLOCK_BC NEWLINE IF_BLOCK | for FOR_PARAM COLON NEWLINE IF_BLOCK NEWLINE IF_BLOCK_BC | for FOR_PARAM COLON NEWLINE IF_BLOCK_BC

# FUNCTION/PROCEDURE 

METHOD_PARAM -> VALUE | ASSIGN 
METHOD -> VARIABLE PERIOD LEFT_RB METHOD_PARAM RIGHT_RB
DEF_BLOCK -> def VARIABLE PARAM COLON ONE_LINE | def VARIABLE PARAM COLON NEWLINE S 

# RETURN 

RETURN -> return BOOLEAN | return VARIABLE | return DATA_TYPE

# CLASS

PARAM_CLASS -> LEFT_RB MULTI_CLASS RIGHT_RB | LEFT_RB RIGHT_RB
CLASS -> class VARIABLE COLON ONE_LINE | class VARIABLE COLON NEWLINE S
CLASS_OBJECT -> VARIABLE PARAM_CLASS

# IMPORT

IMPORT -> import MODULE | IMPORT MODULE AS VARIABLE
FROM -> from MODULE IMPORT

# RAISE 

RAISE -> raise | RAISE VARIABLE | RAISE VARIABLE LEFT_RB string RIGHT_RB | RAISE VARIABLE LEFT_RB string RIGHT_RB from VARIABLE |  RAISE VARIABLE LEFT_RB string RIGHT_RB from NONE

# WITH

WITH -> VARIABLE PARAM AS VARIABLE COLON NEWLINE S