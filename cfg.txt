S -> S S | S NEWLINE S | NEWLINE | COMMENT | ASSIGN | SELF_ARITH | IF_BLOCK | IF_ONE_LINE | WHILE_BLOCK | FOR_BLOCK | DEF_BLOCK | METHOD | RETURN | CLASS | IMPORT | FROM | RAISE | WITH | PRINT | INPUT | PASS | VALUE | ONE_LINE

VARIABLE -> variable
MULTI_VAR -> VARIABLE | VARIABLE COMMA MULTI_VAR
MULTI_TYPE -> TYPE | TYPE COMMA MULTI_TYPE


RELATIONAL_OP -> = = | ! = | > | < | > = | < = | is
LOGICAL_OP -> and | or | not
ARITHMETIC_OP -> + | - | * | / | % | * * | / /
PASS -> pass 
IN -> in
WITH -> with
AS -> as
NONE -> None
INTEGER -> integer | - integer
FLOAT -> integer PERIOD integer | - integer PERIOD integer
LEFT_RB -> (
RIGHT_RB -> )
LEFT_SB -> [
RIGHT_SB -> ]
COLON -> :
COMMA -> ,
PERIOD -> .
NEWLINE -> newline

ONE_LINE -> VALUE | ASSIGN | SELF_ARITH | RAISE | PASS
TYPE -> string | INTEGER | FLOAT
BOOLEAN_OPERAND -> VARIABLE | TYPE | ARITH | True | False | NONE
BOOLEAN -> True | False | NONE | BOOLEAN_OPERAND RELATIONAL_OP BOOLEAN_OPERAND
EXPRESSION_ONE_LINE -> BOOLEAN COLON ONE_LINE | LEFT_RB BOOLEAN RIGHT_RB COLON ONE_LINE
EXPRESSION -> BOOLEAN COLON NEWLINE S | LEFT_RB BOOLEAN RIGHT_RB COLON NEWLINE S | BOOLEAN COLON ONE_LINE | LEFT_RB BOOLEAN RIGHT_RB COLON ONE_LINE
PARAM -> LEFT_RB MULTI_VAR RIGHT_RB | LEFT_RB RIGHT_RB
CASTING -> int LEFT_RB string RIGHT_RB | str LEFT_RB INTEGER RIGHT_RB | int LEFT_RB FLOAT RIGHT_RB | float LEFT_RB INTEGER RIGHT_RB | str LEFT_RB FLOAT RIGHT_RB | float LEFT_RB string RIGHT_RB 
INPUT -> input LEFT_RB string RIGHT_RB
PRINT -> print LEFT_RB VARIABLE RIGHT_RB | print LEFT_RB TYPE RIGHT_RB | print LEFT_RB BOOLEAN RIGHT_RB
MODULE -> VARIABLE | PERIOD VARIABLE | VARIABLE MODULE
TUPPLE -> LEFT_RB MULTI_TYPE RIGHT_RB
LIST -> LEFT_SB MULTI_TYPE RIGHT_SB
ARITH_OPERAND -> INTEGER | VARIABLE | FLOAT
ARITH -> ARITH_OPERAND | ARITH ARITHMETIC_OP ARITH_OPERAND

# BREAK & CONTINUE

BREAK_CONTINUE -> break | continue | break NEWLINE S | continue NEWLINE S | NEWLINE break NEWLINE S | NEWLINE continue NEWLINE S

# COMMENT 

COMMENT -> comment NEWLINE

# ASSIGNMENT

DATA_TYPE -> TYPE | TUPPLE | LIST
ASSIGN -> VARIABLE = ARITH | VARIABLE = DATA_TYPE | VARIABLE = VARIABLE | VARIABLE = ASSIGN 
SELF_ARITH_RIGHT -> INTEGER | VARIABLE | FLOAT
SELF_ARITH -> VARIABLE + = SELF_ARITH_RIGHT  | VARIABLE + = string | VARIABLE - = SELF_ARITH_RIGHT | VARIABLE * = SELF_ARITH_RIGHT | VARIABLE / = SELF_ARITH_RIGHT | VARIABLE % = SELF_ARITH_RIGHT | VARIABLE / / = SELF_ARITH_RIGHT | VARIABLE * * = SELF_ARITH_RIGHT

# CONDITIONAL

VALUE -> TYPE | TUPPLE | LIST | VARIABLE
IF_ONE_LINE -> VALUE if BOOLEAN else ONE_LINE | VARIABLE = VALUE if BOOLEAN else ONE_LINE
IF_BLOCK -> if EXPRESSION | IF_BLOCK ELIF_BLOCK | IF_BLOCK ELSE_BLOCK
ELIF_BLOCK -> elif EXPRESSION | ELIF_BLOCK ELIF_BLOCK | ELIF_BLOCK ELSE_BLOCK 
ELSE_BLOCK -> else COLON NEWLINE S | else COLON ONE_LINE

EXPRESSION_BC -> BOOLEAN COLON NEWLINE BREAK_CONTINUE NEWLINE | LEFT_RB BOOLEAN RIGHT_RB COLON NEWLINE BREAK_CONTINUE NEWLINE | BOOLEAN COLON BREAK_CONTINUE NEWLINE | LEFT_RB BOOLEAN RIGHT_RB COLON BREAK_CONTINUE NEWLINE
EXPRESSION_BC ->  BOOLEAN COLON NEWLINE BREAK_CONTINUE | LEFT_RB BOOLEAN RIGHT_RB COLON NEWLINE BREAK_CONTINUE | BOOLEAN COLON BREAK_CONTINUE | LEFT_RB BOOLEAN RIGHT_RB COLON BREAK_CONTINUE

# CONDITIONAL BREAK CONTINUE

IF_ONE_LINE_BC -> VALUE if BOOLEAN else break | VALUE if BOOLEAN else continue
IF_BLOCK_BC -> if EXPRESSION_BC | IF_BLOCK_BC ELIF_BLOCK_BC | IF_BLOCK_BC ELSE_BLOCK_BC | IF_BLOCK_BC ELIF_BLOCK | IF_BLOCK_BC ELSE_BLOCK
IF_BLOCK_BC -> IF_BLOCK ELIF_BLOCK_BC | IF_BLOCK ELSE_BLOCK_BC
ELIF_BLOCK_BC -> elif EXPRESSION_BC | ELIF_BLOCK_BC ELIF_BLOCK_BC | ELIF_BLOCK_BC ELSE_BLOCK_BC | ELIF_BLOCK_BC ELIF_BLOCK | ELIF_BLOCK_BC ELSE_BLOCK
ELIF_BLOCK_BC -> ELIF_BLOCK ELIF_BLOCK_BC | ELIF_BLOCK ELSE_BLOCK_BC | ELIF_BLOCK_BC ELIF_BLOCK | ELIF_BLOCK_BC ELSE_BLOCK
ELSE_BLOCK_BC -> else COLON NEWLINE BREAK_CONTINUE | else COLON BREAK_CONTINUE | ELSE_BLOCK_BC ELSE_BLOCK

# LOOPING 

WHILE_BLOCK -> while EXPRESSION | while EXPRESSION_ONE_LINE | while EXPRESSION BREAK_CONTINUE | while EXPRESSION IF_BLOCK_BC | while EXPRESSION IF_BLOCK_BC NEWLINE S | while EXPRESSION IF_BLOCK_BC NEWLINE S | while EXPRESSION IF_ONE_LINE_BC NEWLINE S | while EXPRESSION IF_BLOCK_BC NEWLINE ELIF_BLOCK | while EXPRESSION IF_BLOCK_BC NEWLINE IF_BLOCK | while EXPRESSION IF_BLOCK_BC NEWLINE ELSE_BLOCK
# WHILE_BLOCK -> while EXPRESSION | while EXPRESSION_ONE_LINE | while EXPRESSION IF_BLOCK BREAK_CONTINUE ELSE_BLOCK | while EXPRESSION IF_BLOCK BREAK_CONTINUE ELIF_BLOCK | while EXPRESSION IF_BLOCK BREAK_CONTINUE 
FOR_ONE_LINE -> VALUE | ASSIGN | SELF_ARITH | RAISE
RANGE_TYPE -> INTEGER | VARIABLE
RANGE_PARAM -> range LEFT_RB RANGE_TYPE RIGHT_RB | range LEFT_RB RANGE_TYPE COMMA RANGE_TYPE RIGHT_RB | range LEFT_RB RANGE_TYPE COMMA RANGE_TYPE COMMA RANGE_TYPE RIGHT_RB
FOR_PARAM -> VARIABLE IN VALUE | VARIABLE IN RANGE_PARAM
FOR_BLOCK -> for FOR_PARAM COLON ONE_LINE | for FOR_PARAM COLON NEWLINE S

# FUNCTION/PROCEDURE 

METHOD_PARAM -> VALUE | ASSIGN 
METHOD -> VARIABLE PERIOD LEFT_RB METHOD_PARAM RIGHT_RB
DEF_BLOCK -> def VARIABLE PARAM COLON ONE_LINE | def VARIABLE PARAM COLON NEWLINE S 

# RETURN 

RETURN -> return BOOLEAN | return VARIABLE | return DATA_TYPE

# CLASS

CLASS -> class VARIABLE COLON ONE_LINE | class VARIABLE COLON NEWLINE S

# IMPORT

IMPORT -> import MODULE | IMPORT MODULE AS VARIABLE
FROM -> from MODULE IMPORT

# RAISE 

RAISE -> raise | RAISE VARIABLE | RAISE VARIABLE LEFT_RB string RIGHT_RB | RAISE VARIABLE LEFT_RB string RIGHT_RB from VARIABLE |  RAISE VARIABLE LEFT_RB string RIGHT_RB from NONE

# WITH

WITH -> VARIABLE PARAM AS VARIABLE COLON NEWLINE S