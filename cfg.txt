S -> S S | S NEWLINE S | NEWLINE | ASSIGN | SELF_ARITH | IF_BLOCK | IF_ONE_LINE | WHILE_BLOCK | FOR_BLOCK | DEF_BLOCK | RETURN | CLASS | IMPORT | FROM | RAISE | WITH | PRINT | INPUT

VARIABLE -> variable
MULTI_VAR -> VARIABLE | VARIABLE COMMA MULTI_VAR
MULTI_TYPE -> TYPE | TYPE COMMA MULTI_TYPE


RELATIONAL_OP -> = = | ! = | > | < | > = | < = | is
LOGICAL_OP -> and | or | not
ARITHMETIC_OP -> + | - | * | / | % | * * | / /
BREAK -> break 
CONTINUE -> continue
PASS -> pass 
IN -> in
WITH -> with
AS -> as
NONE -> None
INTEGER -> integer
FLOAT -> integer PERIOD integer
LEFT_RB -> (
RIGHT_RB -> )
LEFT_SB -> [
RIGHT_SB -> ]
COLON -> :
COMMA -> ,
PERIOD -> .
NEWLINE -> newline

TYPE -> string | INTEGER | FLOAT
BOOLEAN_OPERAND -> VARIABLE | TYPE | ARITH | True | False | NONE
BOOLEAN -> True | False | NONE | BOOLEAN_OPERAND RELATIONAL_OP BOOLEAN_OPERAND
EXPRESSION -> BOOLEAN COLON NEWLINE S | LEFT_RB BOOLEAN RIGHT_RB COLON S | BOOLEAN COLON | LEFT_RB BOOLEAN RIGHT_RB COLON
PARAM -> LEFT_RB MULTI_VAR RIGHT_RB | LEFT_RB RIGHT_RB
CASTING -> int LEFT_RB string RIGHT_RB | str LEFT_RB INTEGER RIGHT_RB | int LEFT_RB FLOAT RIGHT_RB | float LEFT_RB INTEGER RIGHT_RB | str LEFT_RB FLOAT RIGHT_RB | float LEFT_RB string RIGHT_RB 
INPUT -> input LEFT_RB string RIGHT_RB
PRINT -> print LEFT_RB VARIABLE RIGHT_RB | print LEFT_RB TYPE RIGHT_RB | print LEFT_RB BOOLEAN RIGHT_RB
MODULE -> VARIABLE | PERIOD VARIABLE | VARIABLE MODULE
TUPPLE -> LEFT_RB MULTI_TYPE RIGHT_RB
LIST -> LEFT_SB MULTI_TYPE RIGHT_SB
ARITH -> SELF_ARITH_RIGHT ARITHMETIC_OP SELF_ARITH_RIGHT

# ASSIGNMENT

DATA_TYPE -> TYPE | TUPPLE | LIST
ASSIGN -> VARIABLE = DATA_TYPE | VARIABLE = VARIABLE | VARIABLE = ASSIGN 
SELF_ARITH_RIGHT -> INTEGER | VARIABLE | FLOAT
SELF_ARITH -> VARIABLE + = SELF_ARITH_RIGHT  | VARIABLE + = string | VARIABLE - = SELF_ARITH_RIGHT | VARIABLE * = SELF_ARITH_RIGHT | VARIABLE / = SELF_ARITH_RIGHT | VARIABLE % = SELF_ARITH_RIGHT | VARIABLE / / = SELF_ARITH_RIGHT | VARIABLE * * = SELF_ARITH_RIGHT

# CONDITIONAL

VALUE -> TYPE | TUPPLE | LIST | VARIABLE
IF_ONE_LINE -> VALUE IF EXPRESSION else VALUE
IF_BLOCK -> if EXPRESSION VALUE | if EXPRESSION ASSIGN | if EXPRESSION SELF_ARITH | if EXPRESSION | IF_BLOCK ELIF_BLOCK | IF_BLOCK ELSE_BLOCK | IF_BLOCK BREAK | IF_BLOCK CONTINUE | IF_BLOCK PASS | IF_BLOCK CONTINUE
ELIF_BLOCK -> elif EXPRESSION VALUE | elif EXPRESSION ASSIGN | elif EXPRESSION SELF_ARITH | elif EXPRESSION | ELIF_BLOCK ELIF_BLOCK | ELIF_BLOCK ELSE_BLOCK
ELSE_BLOCK -> else EXPRESSION VALUE | else EXPRESSION ASSIGN | else EXPRESSION SELF_ARITH | else COLON NEWLINE S

# LOOPING 

WHILE_BLOCK -> while EXPRESSION VALUE | while EXPRESSION ASSIGN | while EXPRESSION SELF_ARITH | while EXPRESSION
FOR_ONE_LINE -> VALUE | ASSIGN | SELF_ARITH 
FOR_BLOCK -> for VARIABLE IN VARIABLE COLON FOR_ONE_LINE | for VARIABLE IN VARIABLE COLON NEWLINE S

# FUNCTION/PROCEDURE 

DEF_ONE_LINE -> VALUE | ASSIGN | SELF_ARITH 
DEF_BLOCK -> def VARIABLE PARAM COLON DEF_ONE_LINE | def VARIABLE PARAM COLON NEWLINE S 

# RETURN 

RETURN -> return BOOLEAN | return VARIABLE | return DATA_TYPE

# CLASS

CLASS_ONE_LINE -> VALUE | ASSIGN | SELF_ARITH 
CLASS -> class VARIABLE COLON CLASS_ONE_LINE | class VARIABLE COLON NEWLINE S

# IMPORT

IMPORT -> import MODULE | IMPORT MODULE AS VARIABLE
FROM -> from MODULE IMPORT

# RAISE 

RAISE -> raise | RAISE VARIABLE | RAISE VARIABLE LEFT_RB string RIGHT_RB | RAISE VARIABLE LEFT_RB string RIGHT_RB from VARIABLE |  RAISE VARIABLE LEFT_RB string RIGHT_RB from NONE

# WITH

WITH -> VARIABLE PARAM AS VARIABLE COLON NEWLINE S